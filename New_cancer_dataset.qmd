---
title: "Breast Cancer Dataset"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(titanic)
library(dplyr)
```

```{r}
library(janitor)
library(ggplot2)
library(tidyr)
```

```{r}
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(psych)
```

## Data = the original data; Outliers not taken out; Diagnosis M/B

```{r}
data = read.csv("/Users/labibawajihasiddiquei/Downloads/data.csv")
head(data)
```

```{r}
num_data = select(data, 2:32)
num_data = mutate(num_data, diagnosis = ifelse(diagnosis == 'M', 1, 0)) # M = 1, B = 0
head(num_data)
```

## Cleaned_data = outliers taken out Diagnosis = M/B used for KNN

```{r}
cleaned_data = select(data, 2:32)
head(cleaned_data)
```

## Taking out Outliers and replacing it with median using mutate and ifelse

```{r}
cleaned_data = mutate(cleaned_data, radius_mean = ifelse(radius_mean > 21.9, median(radius_mean), radius_mean))
cleaned_data = mutate(cleaned_data, texture_mean = ifelse(texture_mean > 30.245, median(texture_mean), texture_mean))
cleaned_data = mutate(cleaned_data, perimeter_mean = ifelse(perimeter_mean > 147.495, median(perimeter_mean), perimeter_mean))
cleaned_data = mutate(cleaned_data, area_mean = ifelse(area_mean > 1326.3, median(area_mean), area_mean))
cleaned_data = mutate(cleaned_data, smoothness_mean = ifelse(smoothness_mean > .133695, median(smoothness_mean), smoothness_mean))
cleaned_data = mutate(cleaned_data, smoothness_mean = ifelse(smoothness_mean < .057975, median(smoothness_mean), smoothness_mean))
cleaned_data = mutate(cleaned_data, compactness_mean = ifelse(compactness_mean > .22862, median(compactness_mean), compactness_mean))
cleaned_data = mutate(cleaned_data, concavity_mean = ifelse(concavity_mean > .28241, median(concavity_mean), concavity_mean))
cleaned_data = mutate(cleaned_data, concave.points_mean = ifelse(concave.points_mean > .154535, median(concave.points_mean), concave.points_mean))
cleaned_data = mutate(cleaned_data, symmetry_mean = ifelse(symmetry_mean > 0.2464, median(symmetry_mean), symmetry_mean))
cleaned_data = mutate(cleaned_data, symmetry_mean = ifelse(symmetry_mean < 0.1112, median(symmetry_mean), symmetry_mean))
cleaned_data = mutate(cleaned_data, fractal_dimension_mean = ifelse(fractal_dimension_mean > 0.07875, median(fractal_dimension_mean), fractal_dimension_mean))
cleaned_data = mutate(cleaned_data, radius_se = ifelse(radius_se > 0.84865, median(radius_se), radius_se))
cleaned_data = mutate(cleaned_data, texture_se = ifelse(texture_se > 2.43415, median(texture_se), texture_se))
cleaned_data = mutate(cleaned_data, perimeter_se = ifelse(perimeter_se > 5.9835, median(perimeter_se), perimeter_se))
cleaned_data = mutate(cleaned_data, area_se = ifelse(area_se > 86.2 , median(area_se), area_se))
cleaned_data = mutate(cleaned_data, smoothness_se = ifelse(smoothness_se > 0.0126115 , median(smoothness_se), smoothness_se))
cleaned_data = mutate(cleaned_data, compactness_se = ifelse(compactness_se > 0.061505 , median(compactness_se), compactness_se))
cleaned_data = mutate(cleaned_data, concavity_se = ifelse(concavity_se > 0.08249 , median(concavity_se), concavity_se))
cleaned_data = mutate(cleaned_data, concave.points_se = ifelse(concave.points_se > 0.025318 , median(concave.points_se), concave.points_se))
cleaned_data = mutate(cleaned_data, symmetry_se = ifelse(symmetry_se > 0.03596 , median(symmetry_se), symmetry_se))
cleaned_data = mutate(cleaned_data, fractal_dimension_se = ifelse(fractal_dimension_se > 0.008023 , median(fractal_dimension_se), fractal_dimension_se))
cleaned_data = mutate(cleaned_data, radius_worst = ifelse(radius_worst > 27.46 , median(radius_worst), radius_worst))
cleaned_data = mutate(cleaned_data, texture_worst = ifelse(texture_worst > 42.68 , median(texture_worst), texture_worst))
cleaned_data = mutate(cleaned_data, perimeter_worst = ifelse(perimeter_worst > 187.335 , median(perimeter_worst), perimeter_worst))
cleaned_data = mutate(cleaned_data, area_worst = ifelse(area_worst > 1937.05 , median(area_worst), area_worst))
cleaned_data = mutate(cleaned_data, smoothness_worst = ifelse(smoothness_worst > 0.1901 , median(smoothness_worst), smoothness_worst))
cleaned_data = mutate(cleaned_data, smoothness_worst = ifelse(smoothness_worst < 0.0725 , median(smoothness_worst), smoothness_worst))
cleaned_data = mutate(cleaned_data, compactness_worst = ifelse(compactness_worst > 0.62695 , median(compactness_worst), compactness_worst))
cleaned_data = mutate(cleaned_data, concavity_worst = ifelse(concavity_worst > 0.7855 , median(concavity_worst), concavity_worst))
cleaned_data = mutate(cleaned_data, symmetry_worst = ifelse(symmetry_worst >  0.3179 , median(symmetry_worst), symmetry_worst))
cleaned_data = mutate(cleaned_data, fractal_dimension_worst = ifelse(fractal_dimension_worst >  0.12301 , median(fractal_dimension_worst), fractal_dimension_worst))
```

## Cleaned_num_data = NO outliers Present ; Diagnosis = 1/0

```{r}
cleaned_num_data = select(cleaned_data, 1:31)
cleaned_num_data = mutate(cleaned_num_data, diagnosis = ifelse(diagnosis == 'M', 1, 0)) # M = 1, B = 0
head(cleaned_num_data)
```

## Visualizing the numerical data before and after replacing Outliers

The `echo: false` option disables the printing of code (only output is displayed).

```{r}

boxplot(data$radius_mean,
        names = c("texture_mean"),
        main = "Boxplot: Checking for Outliers in radius_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$radius_mean)

## upper bound = 21.9 

#cleaned_data = mutate(cleaned_data, radius_mean = ifelse(radius_mean > 21.9, median(radius_mean), radius_mean))

boxplot(cleaned_data$radius_mean,
        names = c("texture_mean"),
        main = "Boxplot: Checking for Outliers in radius_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$radius_mean)
                    
                                                         
```

```{r}
boxplot(data$texture_mean,
        names = c("texture_mean"),
        main = "Boxplot: Checking for Outliers in texture_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$texture_mean)

## upper bound 30.245 

#cleaned_data = mutate(cleaned_data, texture_mean = ifelse(texture_mean > 30.245, median(texture_mean), texture_mean))

boxplot(cleaned_data$texture_mean,
        names = c("texture_mean"),
        main = "Boxplot: Checking for Outliers in texture_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$texture_mean)
```

```{r}
boxplot(data$perimeter_mean,
        names = c("perimeter_mean"),
        main = "Boxplot: Checking for Outliers in perimeter_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$perimeter_mean)

## upper bound = 147.495

#cleaned_data = mutate(cleaned_data, perimeter_mean = ifelse(perimeter_mean > 147.495, median(perimeter_mean), perimeter_mean))

boxplot(cleaned_data$perimeter_mean,
        names = c("perimeter_mean"),
        main = "Boxplot: Checking for Outliers in perimeter_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$perimeter_mean)

```

```{r}
boxplot(data$area_mean,
        names = c("area_mean"),
        main = "Boxplot: Checking for Outliers in area_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$area_mean)

## upper bound = 1326.3

#cleaned_data = mutate(cleaned_data, area_mean = ifelse(area_mean > 1326.3, median(area_mean), area_mean))

boxplot(cleaned_data$area_mean,
        names = c("area_mean"),
        main = "Boxplot: Checking for Outliers in area_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$area_mean)

```

```{r}
boxplot(data$smoothness_mean,
        names = c("smoothness_mean"),
        main = "Boxplot: Checking for Outliers in smoothness_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$smoothness_mean)

## upper bound = .133695

## lower bound = .057975

#cleaned_data = mutate(cleaned_data, smoothness_mean = ifelse(smoothness_mean > .133695, median(smoothness_mean), smoothness_mean))
#cleaned_data = mutate(cleaned_data, smoothness_mean = ifelse(smoothness_mean < .057975, median(smoothness_mean), smoothness_mean))

boxplot(cleaned_data$smoothness_mean,
        names = c("smoothness_mean"),
        main = "Boxplot: Checking for Outliers in smoothness_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$smoothness_mean)
```

```{r}
boxplot(data$compactness_mean,
        names = c("compactness_mean"),
        main = "Boxplot: Checking for Outliers in campactness_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$compactness_mean)

## upper bound = .22862

#cleaned_data = mutate(cleaned_data, compactness_mean = ifelse(compactness_mean > .22862, median(compactness_mean), compactness_mean))

boxplot(cleaned_data$compactness_mean,
        names = c("compactness_mean"),
        main = "Boxplot: Checking for Outliers in compactness_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

```

```{r}
boxplot(data$concavity_mean,
        names = c("concavity_mean"),
        main = "Boxplot: Checking for Outliers in convacity_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$concavity_mean)

## upper bound = .28241


#cleaned_data = mutate(cleaned_data, concavity_mean = ifelse(concavity_mean > .28241, median(concavity_mean), concavity_mean))

boxplot(cleaned_data$concavity_mean,
        names = c("concavity_mean"),
        main = "Boxplot: Checking for Outliers in concavity_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$concavity_mean)

```

```{r}
boxplot(data$concave.points_mean,
        names = c("concave.points_mean"),
        main = "Boxplot: Checking for Outliers in concave.points_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$concave.points_mean)


#cleaned_data = mutate(cleaned_data, concave.points_mean = ifelse(concave.points_mean > .154535, median(concave.points_mean), concave.points_mean))

boxplot(cleaned_data$concave.points_mean,
        names = c("concave.points_mean"),
        main = "Boxplot: Checking for Outliers in concave.points_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$concave.points_mean)

## upper bound = .154535

```

```{r}
boxplot(data$symmetry_mean,
        names = c("symmetry_mean"),
        main = "Boxplot: Checking for Outliers in symmetry_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$symmetry_mean)

0.1957 - 0.1619 

0.0338 * 1.5

0.0507 + 0.1957

0.1619 - 0.0507

#cleaned_data = mutate(cleaned_data, symmetry_mean = ifelse(symmetry_mean > 0.2464, median(symmetry_mean), symmetry_mean))
#cleaned_data = mutate(cleaned_data, symmetry_mean = ifelse(symmetry_mean < 0.1112, median(symmetry_mean), symmetry_mean))
boxplot(cleaned_data$symmetry_mean,
        names = c("symmetry_mean"),
        main = "Boxplot: Checking for Outliers in symmetry_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$symmetry_mean)
```

```{r}
boxplot(data$fractal_dimension_mean,
        names = c("fractal_dimension_mean"),
        main = "Boxplot: Checking for Outliers in fractal_dimension_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$fractal_dimension_mean)
((0.06612 - 0.05770 ) * 1.5) + 0.06612 # 0.07875

#cleaned_data = mutate(cleaned_data, fractal_dimension_mean = ifelse(fractal_dimension_mean > 0.07875, median(fractal_dimension_mean), fractal_dimension_mean))

boxplot(cleaned_data$fractal_dimension_mean,
        names = c("fractal_dimension_mean"),
        main = "Boxplot: Checking for Outliers in fractal_dimension_mean", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$fractal_dimension_mean)
```

```{r}
boxplot(data$radius_se,
        names = c("radius_se"),
        main = "Boxplot: Checking for Outliers in radius_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$radius_se)

((0.4789 - 0.2324) * 1.5) + 0.4789 #. 0.84865

#cleaned_data = mutate(cleaned_data, radius_se = ifelse(radius_se > 0.84865, median(radius_se), radius_se))

boxplot(cleaned_data$radius_se,
        names = c("radius_se"),
        main = "Boxplot: Checking for Outliers in radius_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$radius_se)
```

```{r}
boxplot(data$texture_se,
        names = c("texture_se"),
        main = "Boxplot: Checking for Outliers in texture_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$texture_se)

((1.4740 - 0.8339) * 1.5) +  1.4740 # 2.43415

#cleaned_data = mutate(cleaned_data, texture_se = ifelse(texture_se > 2.43415, median(texture_se), texture_se))

boxplot(cleaned_data$texture_se,
        names = c("texture_se"),
        main = "Boxplot: Checking for Outliers in texture_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$texture_se)
```

```{r}
boxplot(data$perimeter_se,
        names = c("perimeter_se"),
        main = "Boxplot: Checking for Outliers in perimeter_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$perimeter_se)

((3.357 - 1.606) * 1.5) + 3.357 # 5.9835

#cleaned_data = mutate(cleaned_data, perimeter_se = ifelse(perimeter_se > 5.9835, median(perimeter_se), perimeter_se))

boxplot(cleaned_data$perimeter_se,
        names = c("perimeter_se"),
        main = "Boxplot: Checking for Outliers in perimeter_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$perimeter_se)
```

```{r}
boxplot(data$area_se,
        names = c("area_se"),
        main = "Boxplot: Checking for Outliers in area_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$area_se)
((45.190 - 17.850) * 1.5) + 45.190 # 86.2 

#cleaned_data = mutate(cleaned_data, area_se = ifelse(area_se > 86.2 , median(area_se), area_se))

boxplot(cleaned_data$area_se,
        names = c("area_se"),
        main = "Boxplot: Checking for Outliers in area_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$area_se)
```

```{r}
boxplot(data$smoothness_se,
        names = c("smoothness_se"),
        main = "Boxplot: Checking for Outliers in smoothness_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$smoothness_se)

((0.008146 - 0.005169) *1.5) + 0.008146 ## 0.0126115

#cleaned_data = mutate(cleaned_data, smoothness_se = ifelse(smoothness_se > 0.0126115 , median(smoothness_se), smoothness_se))

boxplot(cleaned_data$smoothness_se,
        names = c("smoothness_se"),
        main = "Boxplot: Checking for Outliers in smoothness_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$smoothness_se)

```

```{r}
boxplot(data$compactness_se,
        names = c("compactness_se"),
        main = "Boxplot: Checking for Outliers in compactness_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$compactness_se)

((0.032450 - 0.013080) * 1.5) + 0.032450 # 0.061505


#cleaned_data = mutate(cleaned_data, compactness_se = ifelse(compactness_se > 0.061505 , median(compactness_se), compactness_se))

boxplot(cleaned_data$compactness_se,
        names = c("compactness_se"),
        main = "Boxplot: Checking for Outliers in compactness_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$compactness_se)

```

```{r}
boxplot(data$concavity_se,
        names = c("concavity_se"),
        main = "Boxplot: Checking for Outliers in concavity_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$concavity_se)

((0.04205 - 0.01509) * 1.5) + 0.04205 ## 0.08249

#cleaned_data = mutate(cleaned_data, concavity_se = ifelse(concavity_se > 0.08249 , median(concavity_se), concavity_se))

boxplot(cleaned_data$concavity_se,
        names = c("concavity_se"),
        main = "Boxplot: Checking for Outliers in concavity_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$concavity_se)
```

```{r}
boxplot(data$concave.points_se,
        names = c("concave.points_se"),
        main = "Boxplot: Checking for Outliers in concave.points_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$concave.points_se)

((0.014710 - 0.007638) * 1.5) + 0.014710 # 0.025318

#cleaned_data = mutate(cleaned_data, concave.points_se = ifelse(concave.points_se > 0.025318 , median(concave.points_se), concave.points_se))

boxplot(cleaned_data$concave.points_se,
        names = c("concave.points_se"),
        main = "Boxplot: Checking for Outliers in concave.points_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$concave.points_se)
```

```{r}
boxplot(data$symmetry_se,
        names = c("symmetry_se"),
        main = "Boxplot: Checking for Outliers in symmetry_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$symmetry_se)

((0.023480 - 0.015160) * 1.5) + 0.023480 # 0.03596

#cleaned_data = mutate(cleaned_data, symmetry_se = ifelse(symmetry_se > 0.03596 , median(symmetry_se), symmetry_se))

boxplot(cleaned_data$symmetry_se,
        names = c("symmetry_se"),
        main = "Boxplot: Checking for Outliers in symmetry_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$symmetry_se)
```

```{r}
boxplot(data$fractal_dimension_se,
        names = c("fractal_dimension_se"),
        main = "Boxplot: Checking for Outliers in fractal_dimension_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$fractal_dimension_se)

((0.0045580 - 0.0022480) * 1.5 ) + 0.0045580 # 0.008023

#cleaned_data = mutate(cleaned_data, fractal_dimension_se = ifelse(fractal_dimension_se > 0.008023 , median(fractal_dimension_se), fractal_dimension_se))

boxplot(cleaned_data$fractal_dimension_se,
        names = c("fractal_dimension_se"),
        main = "Boxplot: Checking for Outliers in fractal_dimension_se", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$fractal_dimension_se)
```

```{r}
boxplot(data$radius_worst,
        names = c("radius_worst"),
        main = "Boxplot: Checking for Outliers in radius_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$radius_worst)

 ((18.79 - 13.01) * 1.5) + 18.79 # 27.46

#cleaned_data = mutate(cleaned_data, radius_worst = ifelse(radius_worst > 27.46 , median(radius_worst), radius_worst))

boxplot(cleaned_data$radius_worst,
        names = c("radius_worst"),
        main = "Boxplot: Checking for Outliers in radius_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$radius_worst)

```

```{r}

boxplot(data$texture_worst,
        names = c("texture_worst"),
        main = "Boxplot: Checking for Outliers in texture_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$texture_worst)

((29.72 - 21.08) * 1.5) +  29.72 # 42.68

#cleaned_data = mutate(cleaned_data, texture_worst = ifelse(texture_worst > 42.68 , median(texture_worst), texture_worst))

boxplot(cleaned_data$texture_worst,
        names = c("texture_worst"),
        main = "Boxplot: Checking for Outliers in texture_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$texture_worst)

```

```{r}
boxplot(data$perimeter_worst,
        names = c("perimeter_worst"),
        main = "Boxplot: Checking for Outliers in perimeter_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$perimeter_worst)

((125.40 - 84.11) * 1.5) + 125.40 ## 187.335

#cleaned_data = mutate(cleaned_data, perimeter_worst = ifelse(perimeter_worst > 187.335 , median(perimeter_worst), perimeter_worst))

boxplot(cleaned_data$perimeter_worst,
        names = c("perimeter_worst"),
        main = "Boxplot: Checking for Outliers in perimeter_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$perimeter_worst)
```

```{r}
boxplot(data$area_worst,
        names = c("area_worst"),
        main = "Boxplot: Checking for Outliers in area_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$area_worst)

((1084.0 - 515.3) * 1.5) + 1084.0 #1937.05

#cleaned_data = mutate(cleaned_data, area_worst = ifelse(area_worst > 1937.05 , median(area_worst), area_worst))

boxplot(cleaned_data$area_worst,
        names = c("area_worst"),
        main = "Boxplot: Checking for Outliers in area_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$area_worst)
```

```{r}
boxplot(data$smoothness_worst,
        names = c("smoothness_worst"),
        main = "Boxplot: Checking for Outliers in smoothness_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$smoothness_worst)

((0.14600 - 0.11660) * 1.5 ) + 0.14600 #0.1901
0.11660 - ((0.14600 - 0.11660) * 1.5 ) #0.0725

#cleaned_data = mutate(cleaned_data, smoothness_worst = ifelse(smoothness_worst > 0.1901 , median(smoothness_worst), smoothness_worst))
#cleaned_data = mutate(cleaned_data, smoothness_worst = ifelse(smoothness_worst < 0.0725 , median(smoothness_worst), smoothness_worst))
boxplot(cleaned_data$smoothness_worst,
        names = c("smoothness_worst"),
        main = "Boxplot: Checking for Outliers in smoothness_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$smoothness_worst)

```

```{r}
boxplot(data$compactness_worst,
        names = c("compactness_worst"),
        main = "Boxplot: Checking for Outliers in compactness_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$compactness_worst)

((0.33910 - 0.14720) * 1.5 ) + 0.33910 # 0.62695

#cleaned_data = mutate(cleaned_data, compactness_worst = ifelse(compactness_worst > 0.62695 , median(compactness_worst), compactness_worst))

boxplot(cleaned_data$compactness_worst,
        names = c("compactness_worst"),
        main = "Boxplot: Checking for Outliers in compactness_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$compactness_worst)
```

```{r}

boxplot(data$concavity_worst,
        names = c("concavity_worst"),
        main = "Boxplot: Checking for Outliers in concavity_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$concavity_worst)

((0.3829 - 0.1145) * 1.5) + 0.3829 ## 0.7855

#cleaned_data = mutate(cleaned_data, concavity_worst = ifelse(concavity_worst > 0.7855 , median(concavity_worst), concavity_worst))

boxplot(cleaned_data$concavity_worst,
        names = c("concavity_worst"),
        main = "Boxplot: Checking for Outliers in concavity_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$concavity_worst)

```

```{r}
boxplot(data$concave.points_worst,
        names = c("concave.points_worst"),
        main = "Boxplot: Checking for Outliers in concave.points_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$concave.points_worst)
```

```{r}
boxplot(data$symmetry_worst,
        names = c("symmetry_worst"),
        main = "Boxplot: Checking for Outliers in symmetry_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$symmetry_worst)

((0.3179 - 0.2504) * 1.5) + 0.3179 ## 0.41915

#cleaned_data = mutate(cleaned_data, symmetry_worst = ifelse(symmetry_worst >  0.3179 , median(symmetry_worst), symmetry_worst))

boxplot(cleaned_data$symmetry_worst,
        names = c("symmetry_worst"),
        main = "Boxplot: Checking for Outliers in symmetry_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$symmetry_worst)
```

```{r}
boxplot(data$fractal_dimension_worst,
        names = c("fractal_dimension_worst"),
        main = "Boxplot: Checking for Outliers in fractal_dimension_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(data$fractal_dimension_worst)
((0.09208 - 0.07146) * 1.5) + 0.09208 # 0.12301

#cleaned_data = mutate(cleaned_data, fractal_dimension_worst = ifelse(fractal_dimension_worst >  0.12301 , median(fractal_dimension_worst), fractal_dimension_worst))

boxplot(cleaned_data$fractal_dimension_worst,
        names = c("fractal_dimension_worst"),
        main = "Boxplot: Checking for Outliers in fractal_dimension_worst", 
        ylab='Scale',
        las = 2 # Rotate x-axis labels for better readability
        )

summary(cleaned_data$fractal_dimension_worst)
```

```{r}
print('This code cell is black')
```

```{r}
print('This code cell is black')
```

```{r}
print('This code cell is black')
```

## Looking for N/A values in each column

```{r}
colSums(is.na(data)) ## looks for na values in each column 
```

## Normalizing Data with outliers

```{r}
## normalizing data 
normalized_data = scale(num_data)
head(normalized_data)
```

## Normalizing data without outliers

```{r}
cleaned_normalized_data = scale(cleaned_num_data)
head(cleaned_normalized_data)
```

## Plotting correlations of cleaned data

```{r}

##clean data

## Model Matrix 
df_cleaned_normalized_data = data.frame(cleaned_normalized_data)
model.matrix(~0+., data=df_cleaned_normalized_data) %>% 
  cor(use="everything") %>% 
  ggcorrplot(show.diag=FALSE, type="lower", lab=TRUE, lab_size=2) + theme(axis.text.y = element_text(size = 6), axis.text.x = element_text(angle = 90, hjust = 1, size = 6))

## Correlation matrix 

cleaned_correlation_matrix <- cor(df_cleaned_normalized_data, use = "everything")
ggcorrplot(correlation_matrix) + theme(axis.text.y = element_text(size = 6), axis.text.x = element_text(angle = 90, hjust = 1, size = 6))

corPlot(cleaned_normalized_data, cex = .5, xsrt = 90, ysrt = 90, cex.axis = .75, cex.ysrt = .5, stars =TRUE) # psych

## Unclean data

## Model Matrix 
df_normalized_data = data.frame(normalized_data)
model.matrix(~0+., data=df_normalized_data) %>% 
  cor(use="everything") %>% 
  ggcorrplot(show.diag=FALSE, type="lower", lab=TRUE, lab_size=2) + theme(axis.text.y = element_text(size = 6), axis.text.x = element_text(angle = 90, hjust = 1, size = 6))

## Correlation matrix 

correlation_matrix <- cor(df_normalized_data, use = "everything")
ggcorrplot(correlation_matrix) + theme(axis.text.y = element_text(size = 6), axis.text.x = element_text(angle = 90, hjust = 1, size = 6))

##psych 

corPlot(normalized_data, cex = .5, xsrt = 90, ysrt = 90, cex.axis = .75, cex.ysrt = .5, stars =TRUE) # psych

```

## PCA of Clean and Uncleaned Data

```{r}
data.pca = princomp(normalized_data)
```

```{r}
clean.data.pca = princomp(cleaned_normalized_data)
```

```{r}
summary(data.pca)
```

```{r}
summary(clean.data.pca)
```

```{r}
data.pca$loadings[, 1:5]
```

```{r}
clean.data.pca$loadings[, 1:2]
```

```{r}
fviz_eig(data.pca, addlabels = TRUE)
fviz_eig(clean.data.pca, addlabels = TRUE)
```

```{r}
fviz_cos2(data.pca, choice = "var", axes = 1:2)
fviz_cos2(clean.data.pca, choice = "var", axes = 1:2)
```

```{r}
fviz_pca_var(data.pca, col.var = "cos2",
             gradient.cols = c("black", "orange", "green"),
             repel = TRUE)

fviz_pca_var(clean.data.pca, col.var = "cos2",
             gradient.cols = c("black", "orange", "green"),
             repel = TRUE)
```

```{r}

shortened_data = select(cleaned_num_data, c("diagnosis", "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean", "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_worst", "concavity_worst"))
head(shortened_data)
```

```{r}
corPlot(shortened_data, cex = .5, xsrt = 90, ysrt = 90, cex.axis = .75, cex.yaxis = .5, stars =TRUE)
```

```{r}
correlation_matrix <- cor(shortened_data, use = "everything")
ggcorrplot(correlation_matrix) + theme(axis.text.y = element_text(size = 6), axis.text.x = element_text(angle = 90, hjust = 1, size = 6))
```

```{r}
model.matrix(~0+., data=shortened_data) %>% 
  cor(use="everything") %>% 
  ggcorrplot(show.diag=FALSE, type="lower", lab=TRUE, lab_size=2) + theme(axis.text.y = element_text(size = 6), axis.text.x = element_text(angle = 90, hjust = 1, size = 6))
```

## Making a KNN Model - Predicting of a cell is cancerous or not 

```{r}
library(caTools)
library(readr)
library(downloader)
library(caTools)
library(FNN)
library(readxl)
```

```{r}
set.seed(42)
split = sample.split(shortened_data$diagnosis, SplitRatio = 0.8)
```

```{r}
train_data = subset(shortened_data, split == TRUE)
test_data = subset(shortened_data, split == FALSE)
```

```{r}
numbers <- c(1:100)
results <- numeric()
for (num in numbers){
  knn_model = knn(train = train_data[, c( "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean",   "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_se")], 
                test = test_data[, c( "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean", "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_se")], 
                cl = train_data$diagnosis, 
                k = num)
  pred = knn_model
  confusion_matrix = table(test_data$diagnosis, pred)
  accuracy = sum(diag(confusion_matrix)) / sum(confusion_matrix)
  results <- c(results, accuracy)
  #print(accuracy)
  }
#print(accuracy)
#print(results)
```

```{r}
results_df = data.frame(results, Number_of_Neighbours = 1:100)
head(results_df, 10)
```

```{r}
ggplot(data = results_df, aes( x = Number_of_Neighbours, y = results)) +
  geom_line() +
  labs(title = "Error", 
       x = "# Neighbours",
       y = "Accuracy") 
```

```{r}
filtered_results = filter(results_df, Number_of_Neighbours < 25, Number_of_Neighbours > 15)
```

```{r}
ggplot(data = filtered_results, aes( x = Number_of_Neighbours, y = results)) +
  geom_line() +
  labs(title = "Error", 
       x = "# Neighbours",
       y = "Accuracy") 
```

## The optimal Number of Neighbour is 20 and 22

## KNN model with 20 Neighbours

```{r}
knn_model_20 = knn(train = train_data[, c( "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean",   "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_se")], 
                test = test_data[, c( "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean", "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_se")], 
                cl = train_data$diagnosis, 
                k = 20)
```

```{r}
pred_20 = knn_model_20
```

```{r}
install.packages('gmodels')
library(gmodels)
confusion_matrix_20 = table(test_data$diagnosis, pred_20) ## actual confusion matrix ##
table_confusion_matrix_20 = CrossTable(table(test_data$diagnosis, pred_20)) ## creating a confusion matrix table
accuracy_20 = sum(diag(confusion_matrix_20)) / sum(confusion_matrix_20)


print(table_confusion_matrix_20)
print(confusion_matrix_20)
print(accuracy_20)
```

## KNN model with 22 Neighbours

```{r}

knn_model_22 = knn(train = train_data[, c( "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean",   "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_se")], 
                test = test_data[, c( "radius_mean", "radius_worst","area_mean","area_worst","perimeter_mean", "perimeter_worst", "concave.points_mean" , "concave.points_worst", "concavity_mean", "concavity_worst", "compactness_mean", "compactness_se")], 
                cl = train_data$diagnosis, 
                k = 22)

pred_22 = knn_model_22

confusion_matrix_22 = table(test_data$diagnosis, pred_22) ## actual confusion matrix ##
table_confusion_matrix_22 = CrossTable(table(test_data$diagnosis, pred_22)) ## creating a confusion matrix table
accuracy_22 = sum(diag(confusion_matrix_22)) / sum(confusion_matrix_22)


print(table_confusion_matrix_22)
print(confusion_matrix_22)
print(accuracy_22)

```

## Statistical tests - Anova test / t-test

```{r}
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(broom)
install.packages('AICcmodavg')
library(AICcmodavg)
```

```{r}
head(shortened_data)

chr_shortened_data= mutate(shortened_data, diagnosis = ifelse(diagnosis == '1', 'M', 'B')) # M = 1, B = 0
head(chr_shortened_data)
```

## Analyzing what the key differences are between malignant and benign cells 

## Testing if radius_worst is different by diagnosis

```{r}
radiusworst_t_test <- t.test(radius_worst ~ diagnosis, data = chr_shortened_data)
print(radiusworst_t_test)
```

## WHAT DOES THE RESULT MEAN?

Here is the interpretation of output - **Test Type**:

-   **Welch Two Sample t-test**: This is a variant of the two-sample t-test that does not assume equal variances between the two groups. It's often used when comparing means of two groups with potentially unequal variances.

-   **Test Statistic (t)**: **t = -24.514**: The t-statistic measures how many standard deviations the sample mean difference is from the null hypothesis mean difference (which is 0). A very large magnitude of the t-value indicates a strong difference between the groups.

-   **Degrees of Freedom (df)**: **df = 289.87**: The degrees of freedom used in the Welch test, which accounts for the sample sizes and variances of the two groups. This value is used to determine the critical value from the t-distribution.

-   **P-value**: **p-value \< 2.2e-16**: The p-value is the probability of observing a test statistic as extreme as, or more extreme than, the observed value under the null hypothesis. Here, the p-value is extremely small, indicating that the observed difference between the groups is statistically significant.

-   **95 Percent Confidence Interval**: **95 percent confidence interval: -7.048329 -6.000654**: This interval gives a range in which the true difference in means between the two groups is likely to fall with 95% confidence. Since the entire interval is below zero, it suggests that group M has a significantly higher mean value than group B.

    **Interpretation**

    1.  **Significant Difference**:

        The very small p-value (\< 2.2e-16) indicates that there is a statistically significant difference between the means of group B and group M. The result is far beyond typical significance levels (e.g., 0.05), so we reject the null hypothesis that the means are equal.

    2.  **Direction of Difference**:

        The negative t-value and the confidence interval suggest that group M has a higher mean value for radius_worst compared to group B. Specifically, the confidence interval shows that the mean of group M is between 6.00 and 7.05 units higher than that of group B.

    3.  **Magnitude of Difference**:

        The mean values indicate that, on average, group M has a radius_worst measurement of about 19.90, while group B has a mean of about 13.38. The difference of approximately 6.52 units is statistically significant.

        In summary, the t-test results show a significant difference between the means of radius_worst for the two groups, with group M having a higher mean value compared to group B. The results suggest a strong and statistically significant effect.

## Doing a T-test for all the variables

```{r}
##Here testData[-1] refers to all columns of testData but the first one (which contains the labels). Negative indexing is used for excluding data.## 
## here the first column is disgnosis 
lapply(shortened_data[-1], function(x) t.test(x ~ shortened_data$diagnosis))
```

\*\* **1. T-Test**

-   **Purpose**: Compares the means of two groups to determine if they are significantly different from each other.

-   **ANOVA**

    **Purpose**: Compares the means of three or more groups to determine if there are significant differences among them.

    **Example**: Comparing radius_mean among multiple categories if you had more than two diagnosis types or another grouping factor.

    **Applying These Tests to the Breast Cancer Dataset**

    Given your dataset, which contains tumor characteristics and a diagnosis indicator (diagnosis), here's how you would use both tests:

    1.  **T-Test for Comparing Two Groups**If you want to compare the means of a particular feature (e.g., radius_mean) between two groups (malignant and benign):

        \# Independent Samples T-Test

    2.  t_test_result \<- t.test(radius_mean \~ diagnosis, data = data)

    3.  print(t_test_result)

    4.  **Interpretation**:

    5.  **Null Hypothesis (H0)**: The mean radius_mean is the same for malignant and benign tumors

    6.  **Alternative Hypothesis (H1)**: The mean radius_mean is different between malignant and benign tumors.

    7.  **p-value**: Indicates whether the difference in means is statistically significant.

        **ANOVA for Comparing More Than Two Groups**

        If you had more than two groups (e.g., if you wanted to compare radius_mean across different types of tumors or additional categories), you would use ANOVA. However, in your case, if you only have two groups (M and B), a t-test is appropriate.
